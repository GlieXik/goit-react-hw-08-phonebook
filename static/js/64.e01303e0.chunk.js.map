{"version":3,"file":"static/js/64.e01303e0.chunk.js","mappings":"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","sources":["utils/Box.jsx","Components/Contacts/Contacts.styled.jsx","Components/Contacts/ContactItem.jsx","redux/contacts/selectors.jsx","Components/Contacts/Contacts.jsx","Components/Phonebook/Phonebook.styled.jsx","Components/Phonebook/Phonebook.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components'\nimport { color,space,layout,flexbox,border, position,grid } from 'styled-system'\n\n\nexport const Box = styled('div')(\n    {\n      boxSizing: 'border-box',\n    },\n    space,\n    layout,\n    color,\n    flexbox,\n    border,\n    position,\n    grid\n  )","import styled from \"styled-components\";\n\nexport const ContactsList = styled(\"ul\")`\n  width: 250px;\n`;\nexport const ContactsItem = styled(\"li\")`\n  display: block;\n  color: #000;\n  background-color: white;\n  padding: 8px 16px;\n  text-decoration: none;\n  display: flex;\n  justify-content: space-between;\n  animation: 1s show ease;\n\n  @keyframes show {\n    from {\n      opacity: 0;\n      background-color: transparent;\n      color: transparent;\n    }\n    to {\n      opacity: 1;\n      background-color: white;\n      color: #000;\n    }\n  }\n  &:hover {\n    background-color: rgb(232, 243, 254);\n  }\n`;\n","import { ContactsItem } from \"./Contacts.styled\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport { useDispatch } from \"react-redux\";\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ContactsItem key={id}>\n        <span>\n          {name} : {number}\n        </span>\n        <button onClick={() => dispatch(deleteContact(id))}>\n          <AiFillDelete />\n        </button>\n      </ContactsItem>\n    </>\n  );\n};\n","export const getContacts = (state) => state.contacts.contacts.items;\nexport const getIsLoading = (state) => state.contacts.contacts;\nexport const getError = (state) => state.contacts.contacts.error;\nexport const getFilter = (state) => state.contacts.filter;\n","import { Box } from \"../../utils/Box\";\nimport { ContactItem } from \"./ContactItem\";\nimport { useSelector } from \"react-redux\";\nimport { getContacts, getFilter } from \"../../redux/contacts/selectors\";\nexport const Contacts = () => {\n  const contactsList = useSelector(getContacts);\n  const filterName = useSelector(getFilter);\n\n  const filterList = contactsList.filter((el) =>\n    el.name.toLowerCase().includes(filterName.toLowerCase())\n  );\n  return (\n    <div>\n      {contactsList.length === 0 ? (\n        <Box\n          p={4}\n          width=\"250px\"\n          display=\"flex\"\n          flexWrap=\"wrap\"\n          justifyContent=\"center\"\n        >\n          <b>{\"Empty List\".toUpperCase()}</b>\n        </Box>\n      ) : (\n        <Box as=\"ul\" width=\"250px\">\n          {filterList.map(({ id, name, number }) => (\n            <ContactItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n            ></ContactItem>\n          ))}\n        </Box>\n      )}\n    </div>\n  );\n};\n","import styled from \"styled-components\";\nimport { Field } from \"formik\";\nimport InputMask from \"react-input-mask\";\n\nexport const SLabel = styled(\"label\")`\n  position: relative;\n  width: 250px;\n  background-color: #fff;\n  display: flex;\n  &:before {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    height: 2px;\n    background: #0170f0;\n    transform: scale(0);\n    transform-origin: center;\n    transform-origin: left;\n    transition: transform 0.25s;\n  }\n  &:focus-within::before {\n    transform: scale(1);\n  }\n`;\nexport const SField = styled(Field)`\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: #8e8e8e;\n  width: 100%;\n  padding: 10px;\n`;\n\nexport const SMaskedInput = styled(InputMask)`\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: #8e8e8e;\n  width: 100%;\n  padding: 10px;\n`;\nexport const ButtonSub = styled(\"button\")`\n  margin-top: ${(p) => p.theme.space[4]}px;\n  align-items: center;\n  appearance: none;\n  background-color: #fcfcfd;\n  border-radius: 4px;\n  border-width: 0;\n  box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px,\n    rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #d6d6e7 0 -3px 0 inset;\n  box-sizing: border-box;\n  color: #36395a;\n  cursor: pointer;\n  display: inline-flex;\n  font-family: \"JetBrains Mono\", monospace;\n  height: 48px;\n  justify-content: center;\n  line-height: 1;\n  list-style: none;\n  overflow: hidden;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: relative;\n  text-align: left;\n  text-decoration: none;\n  transition: box-shadow 0.15s, transform 0.15s;\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  white-space: nowrap;\n  will-change: box-shadow, transform;\n  font-size: 18px;\n  &:focus {\n    box-shadow: #d6d6e7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px,\n      rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #d6d6e7 0 -3px 0 inset;\n  }\n  &:hover {\n    box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px,\n      rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #d6d6e7 0 -3px 0 inset;\n    transform: translateY(-2px);\n  }\n  &:active {\n    box-shadow: #d6d6e7 0 3px 7px inset;\n    transform: translateY(2px);\n  }\n`;\n","import { Formik, Form } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/operations\";\nimport { getContacts } from \"../../redux/contacts/selectors\";\n\nimport { Box } from \"../../utils/Box\";\nimport { SField, SLabel, SMaskedInput, ButtonSub } from \"./Phonebook.styled\";\nimport * as Yup from \"yup\";\n\nexport const Phonebook = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(getContacts);\n  const contactNames = contactsList.map((e) => e.name);\n\n  const SignupSchema = Yup.object().shape({\n    name: Yup.string().required(\"Required\"),\n    number: Yup.string().required(\"Required\"),\n  });\n  const initialValues = {\n    name: \"\",\n    number: \"\",\n  };\n  const submit = (value, evt) => {\n    onAddContact(value);\n    evt.resetForm();\n  };\n  const onAddContact = ({ name, number }) => {\n    if (contactNames.find((e) => e.toLowerCase() === name)) {\n      alert(name + \" is already in contacts\");\n      return;\n    }\n    dispatch(addContact({ name, number }));\n  };\n  const handleEnter = (event) => {\n    if (event.key.toLowerCase() === \"enter\") {\n      const form = event.target.form;\n      const index = [...form].indexOf(event.target);\n      form.elements[index + 1].focus();\n      event.preventDefault();\n    }\n  };\n  return (\n    <>\n      <Box width=\"250px\">\n        <Formik\n          initialValues={initialValues}\n          onSubmit={submit}\n          validationSchema={SignupSchema}\n        >\n          <Form>\n            <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\n              <Box mb={3}>\n                <SLabel htmlFor=\"name\">\n                  <SField\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    type=\"text\"\n                    onKeyDown={handleEnter}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  />\n                </SLabel>\n              </Box>\n              <div>\n                <SLabel htmlFor=\"number\">\n                  <SField id=\"number\" name=\"number\">\n                    {({ field }) => {\n                      return (\n                        <SMaskedInput\n                          mask=\"999-99-99\"\n                          {...field}\n                          type=\"tel\"\n                          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                          placeholder=\"Number\"\n                        />\n                      );\n                    }}\n                  </SField>\n                </SLabel>\n              </div>\n\n              <ButtonSub type=\"submit\">Submit</ButtonSub>\n            </Box>\n          </Form>\n        </Formik>\n      </Box>\n    </>\n  );\n};\n","import styled from \"styled-components\";\nexport const Label = styled(\"label\")`\n  position: relative;\n  width: 250px;\n  background-color: #fff;\n  display: flex;\n  &:before {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    height: 2px;\n    background: #0170f0;\n    transform: scale(0);\n    transform-origin: center;\n    transform-origin: left;\n    transition: transform 0.25s;\n  }\n  &:focus-within::before {\n    transform: scale(1);\n  }\n`;\nexport const Input = styled(\"input\")`\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: #8e8e8e;\n  width: 100%;\n  padding: 10px;\n`;\n","import { Label, Input } from \"./Filter.styled\";\n\nimport { useDispatch } from \"react-redux\";\nimport { filterTask } from \"../../redux/contacts/contatcsSlice\";\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = (e) => {\n    const value = e.currentTarget.value;\n    dispatch(filterTask(value));\n  };\n  return (\n    <>\n      <Label>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          onChange={changeFilter}\n          placeholder=\"Find contacts by name\"\n        ></Input>\n      </Label>\n    </>\n  );\n};\n","import { Contacts } from \"../Components/Contacts/Contacts\";\n\nimport { Phonebook } from \"../Components/Phonebook/Phonebook\";\nimport { useEffect } from \"react\";\n\nimport { Filter } from \"../Components/Filter/Filter\";\n\nimport { Box } from \"../utils/Box\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getError, getIsLoading } from \"../redux/contacts/selectors\";\nimport { fetchContacts } from \"../redux/contacts/operations\";\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\n        <h1>Phonebook</h1>\n        <Phonebook />\n        <h2>Contacts</h2>\n        {isLoading && error && <b>Request in progress...</b>}\n        <Filter />\n        <Contacts />\n      </Box>\n    </>\n  );\n};\nexport default RegisterPage;\n"],"names":["Box","styled","boxSizing","space","layout","color","flexbox","border","position","grid","ContactsItem","ContactItem","id","name","number","dispatch","useDispatch","onClick","deleteContact","getContacts","state","contacts","items","getIsLoading","getError","error","getFilter","filter","Contacts","contactsList","useSelector","filterName","filterList","el","toLowerCase","includes","length","p","width","display","flexWrap","justifyContent","toUpperCase","as","map","SLabel","SField","Field","SMaskedInput","InputMask","ButtonSub","theme","Phonebook","contactNames","e","SignupSchema","Yup","shape","required","onAddContact","find","alert","addContact","initialValues","onSubmit","value","evt","resetForm","validationSchema","mb","htmlFor","placeholder","type","onKeyDown","event","key","form","target","index","indexOf","elements","focus","preventDefault","pattern","field","mask","Label","Input","Filter","onChange","currentTarget","filterTask","isLoading","useEffect","fetchContacts","alignItems","flexDirection"],"sourceRoot":""}